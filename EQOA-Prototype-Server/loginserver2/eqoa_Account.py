# Benturi
# July 20, 2018 
#
import bcrypt
from sqlalchemy import func   # func.now()
from sqlalchemy import *
from eqoa_BaseDBsetup import *
#
######################################################################
#
#  
class Account:     
        
    def __init__(self):            # basically our old stub account
        self.username     = None   # used before authentication 
        self.password     = None   # used before authentication 
        self.hashpw       = None   # used before authentication 
        self.accountid    = None   # probably generated by DB - could set 
        self.acctlevel    = None        
        #
        #  Creation Data
        #
        self.acctcreation = None
        #
        # Last Login
        #
        self.ipaddress    = None 
        self.lastlogin    = None  # Last time user logged in successfully
        #        
        # User Info       
        #        
        self.first        = None
        self.last         = None
        self.middle       = None
        self.unknown1     = None
        self.unknown2     = None
        self.country      = None
        self.zip          = None
        self.day          = None
        self.month        = None
        self.year         = None
        self.sex          = None
        self.email        = None
        #
        # Sub Information
        #
        self.acctstatus   = None  # Default values - admin tools required to change
        self.result       = None
        self.subtime      = None
        self.partime      = None
        self.subfeatures  = None
        self.gamefeatures = None

    def setUserInfo(self, username, first,last,middle,unknown1,unknown2,country,zip,day,month,year,sex,email):
        #
        self.username = username
        self.first    = first
        self.middle   = middle 
        self.last     = last
        self.unknown1 = unknown1 
        self.unknown2 = unknown2 
        self.country  = country 
        self.zip      = zip 
        self.day      = day 
        self.month    = month 
        self.year     = year 
        self.sex      = sex 
        self.email    = email 

    def setAcctLvl(self,acctlevel):
        self.acctlevel = acctlevel 

    def setCreation(self,acctcreation):
        self.acctcreation = acctcreation

    def setLastLogin(self,ipaddress,lastlogin): # this is handled automatically 
        self.ipaddress = ipaddress
        self.lastlogin = lastlogin

    def setSubInfo(self,result,acctstatus,subtime,partime,subfeatures,gamefeatures):  # can be driven by gamecard stuff 
        self.result = result   # probably don't need
        self.acctstatus = acctstatus
        self.subtime = subtime
        self.partime = partime
        self.subfeatures = subfeatures
        self.gamefeatures = gamefeatures
    
    def setHashPW(self,password):    
        self.hashpw       = bcrypt.hashpw(password.encode(), bcrypt.gensalt(10))  # could save salt separate
        self.password     = None
        #
        #
        # Probably call to save info into DB after this initial call
        
    def changePassword(self):
      pass    
#
#####################################################################################################
#
class AccountDB_ops:
    
    def __init__(self, myDBsession,thisAccount):
      self.myDBsession = myDBsession
      self.thisAccount = thisAccount
     
    def usernameExists(self): 
        if eval(repr(self.myDBsession.query(exists().where(AccountInfo.username == self.thisAccount.username)).scalar())): 
            return True
        else:
            return False
    
    def authenticateUser(self): 
      try: 
        pas = self.thisAccount.password.encode()
        row = self.myDBsession.query(AccountInfo).filter(AccountInfo.username == self.thisAccount.username).first()
        if (row.username == self.thisAccount.username):
            if bcrypt.hashpw(pas, row.pwhash) == row.pwhash:
                return True
            else:
                return False
        else:
            return False
      
      except:
        #Authentication failed
        return
        
    def verifyUser(self, password): # works on stub
        password = password.encode()
        row = self.myDBsession.query(AccountInfo).filter(AccountInfo.username == self.thisAccount.username).first()
        if (row.username == self.thisAccount.username):
            if bcrypt.hashpw(password, row.pwhash) == row.pwhash:
                return True
            else:
                return False
        else:
            return False
    
    def changePasswordDB(self, password):
        password = password.encode()
        row = self.myDBsession.query(AccountInfo).filter(AccountInfo.username == self.thisAccount.username).one()
        newpassword = bcrypt.hashpw(password, bcrypt.gensalt(10))
        data = {'pwhash': newpassword}
        self.myDBsession.query(AccountInfo).filter(AccountInfo.username == self.thisAccount.username).update(data, synchronize_session = 'fetch')
    
    def pushLoginInfo(self,thisClient): # this saves lastlogin and ipaddress to Account 
       #
       # After authentication, this is called immediately - could maybe combine
       #
       row = self.myDBsession.query(AccountInfo).filter(AccountInfo.username == self.thisAccount.username).one()
       if (row.username == self.thisAccount.username):
           try:
               # other things or not? maybe ipaddress into DB - not sure if it works as below
               #probably have to add whole thing or try different way
               data = {'lastlogin': func.now(), 'ipaddress': thisClient.ip}
               self.myDBsession.query(AccountInfo).filter(AccountInfo.username == self.thisAccount.username).update(data, synchronize_session = 'fetch')
               self.myDBsession.commit()
           except SQLAlchemyError as e:
               print(str(e)) 
         
      
#
    def pushAccount(self):  # pushing account to DB / only on account creation 
        #
        newuser = AccountInfo(username       = self.thisAccount.username,
                                pwhash       = self.thisAccount.hashpw,
                                acctstatus   = self.thisAccount.acctstatus,
                                acctlevel    = self.thisAccount.acctlevel,
                                acctcreation = func.now(),
                                lastlogin    = func.now(),
                                ipaddress    = self.thisAccount.ipaddress,
                                firstname    = self.thisAccount.first,
                                unknown1     = self.thisAccount.unknown1,
                                midinitial   = self.thisAccount.middle,
                                lastname     = self.thisAccount.last,
                                unknown2     = self.thisAccount.unknown2,
                                countryAB    = self.thisAccount.country,
                                zip          = self.thisAccount.zip,
                                birthday     = self.thisAccount.day,
                                birthyear    = self.thisAccount.year,
                                birthmon     = self.thisAccount.month,
                                sex          = self.thisAccount.sex,
                                email        = self.thisAccount.email,
                                result       = self.thisAccount.result,
                                subtime      = self.thisAccount.subtime,
                                partime      = self.thisAccount.partime,
                                subfeatures  = self.thisAccount.subfeatures,
                                gamefeatures = self.thisAccount.gamefeatures)    
        try:
            self.myDBsession.add(newuser)
            self.myDBsession.flush()
            self.myDBsession.commit()
        except SQLAlchemyError as e:
            print(str(e))
    #
    # pull account from DB Normal use after authentications 
    #
    def pullAccount(self):  # pull based on UID or username?
       row = self.myDBsession.query(AccountInfo).filter(AccountInfo.username == self.thisAccount.username).first()
       if (row.username == self.thisAccount.username):
         self.thisAccount.accountid    = row.accountid
         self.thisAccount.username     = row.username
         self.thisAccount.hashpw       = row.pwhash  
         self.thisAccount.acctstatus   = row.acctstatus
         self.thisAccount.acctlevel    = row.acctlevel
         self.thisAccount.acctcreation = row.acctcreation 
         self.thisAccount.lastlogin    = row.lastlogin
         self.thisAccount.ipaddress    = row.ipaddress
         self.thisAccount.first        = row.firstname
         self.thisAccount.unknown1     = row.unknown1
         self.thisAccount.middle       = row.midinitial
         self.thisAccount.last         = row.lastname
         self.thisAccount.unknown2     = row.unknown2
         self.thisAccount.country      = row.countryAB
         self.thisAccount.zip          = row.zip
         self.thisAccount.day          = row.birthday
         self.thisAccount.year         = row.birthyear
         self.thisAccount.month        = row.birthmon
         self.thisAccount.sex          = row.sex
         self.thisAccount.email        = row.email
         self.thisAccount.result       = row.result  # really probably don't need this 
         # 
         self.thisAccount.subtime      = row.subtime
         self.thisAccount.partime      = row.partime
         self.thisAccount.subfeatures  = row.subfeatures
         self.thisAccount.gamefeatures = row.gamefeatures 
       
    #

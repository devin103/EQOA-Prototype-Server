'''
Created December 23rd, 2016

@author: Devin Dallas
'''

import eqoa_questlog
import unittest


class questTest(unittest.TestCase):
    
    def test_questLog(self):
        #
        expectedMessageBytes     = [0x33, 0x00, 0x00, 0x00, 0x47, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x73, 0x00, 0x65, 0x00, 0x65, 0x00, 0x20, 0x00, 0x50, 0x00, 0x73, 0x00, 0x61, 0x00, 0x68, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x48, 0x00, 0x69, 0x00, 0x67, 0x00, 0x68, 0x00, 0x70, 0x00, 0x61, 0x00, 0x73, 0x00, 0x73, 0x00, 0x20, 0x00, 0x74, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x62, 0x00, 0x65, 0x00, 0x67, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x79, 0x00, 0x6F, 0x00, 0x75, 0x00, 0x72, 0x00, 0x20, 0x00, 0x66, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x61, 0x00, 0x6C, 0x00, 0x20, 0x00, 0x74, 0x00, 0x72, 0x00, 0x69, 0x00, 0x61, 0x00, 0x6C, 0x00, 0x2E, 0x00]
        expectedMessageByteArray = "".join( chr( val) for val in expectedMessageBytes)  # Converts to byte array vs list. 
        #
        myQuestText = 'Go see Psahn in Highpass to begin your final trial.'
        #
        t = eqoa_questlog.questlog(myQuestText)
        #
        #t.printQuestLog()
        #
        # encode Quest Object and compare with expected
        #
        receivedMessageByteArray = t.encodeQuestLog()
        #
        #print
        #print "CALCD : "+ " ".join("{:02X}".format(ord(c)) for c in receivedMessageByteArray)
        #print "EXPECT: "+ " ".join("{:02X}".format(ord(c)) for c in expectedMessageByteArray)
        #
        self.assertEquals(receivedMessageByteArray,expectedMessageByteArray) 

class questlogTest(unittest.TestCase):

    def test_questLogList(self):
        #
        #expectedMessageBytes = []
        expectedMessageBytes  = [0x6C, 0x00, 0x00, 0x00, 0x52, 0x00, 0x65, 0x00, 0x63, 0x00, 0x6F, 0x00, 0x76, 0x00, 0x65, 0x00, 0x72, 0x00, 0x20, 0x00, 0x33, 0x00, 0x20, 0x00, 0x77, 0x00, 0x65, 0x00, 0x61, 0x00, 0x6B, 0x00, 0x20, 0x00, 0x68, 0x00, 0x65, 0x00, 0x72, 0x00, 0x62, 0x00, 0x73, 0x00, 0x20, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x20, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x6F, 0x00, 0x74, 0x00, 0x73, 0x00, 0x20, 0x00, 0x66, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x6D, 0x00, 0x20, 0x00, 0x74, 0x00, 0x68, 0x00, 0x65, 0x00, 0x20, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x63, 0x00, 0x73, 0x00, 0x20, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x46, 0x00, 0x72, 0x00, 0x65, 0x00, 0x65, 0x00, 0x70, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x74, 0x00, 0x2C, 0x00, 0x20, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x20, 0x00, 0x70, 0x00, 0x69, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x63, 0x00, 0x6C, 0x00, 0x61, 0x00, 0x77, 0x00, 0x20, 0x00, 0x6D, 0x00, 0x79, 0x00, 0x73, 0x00, 0x74, 0x00, 0x69, 0x00, 0x63, 0x00, 0x20, 0x00, 0x74, 0x00, 0x6F, 0x00, 0x74, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x73, 0x00, 0x20, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x64, 0x00, 0x20, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x62, 0x00, 0x73, 0x00, 0x20, 0x00, 0x6E, 0x00, 0x65, 0x00, 0x61, 0x00, 0x72, 0x00, 0x20, 0x00, 0x52, 0x00, 0x75, 0x00, 0x6E, 0x00, 0x6E, 0x00, 0x79, 0x00, 0x65, 0x00, 0x79, 0x00, 0x65, 0x00, 0x2E, 0x00, 0x20, 0x00, 0x20, 0x00]
        expectedMessageBytes += [0x45, 0x00, 0x00, 0x00, 0x47, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x74, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x42, 0x00, 0x75, 0x00, 0x72, 0x00, 0x69, 0x00, 0x61, 0x00, 0x6C, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x6F, 0x00, 0x75, 0x00, 0x6E, 0x00, 0x64, 0x00, 0x73, 0x00, 0x20, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x64, 0x00, 0x20, 0x00, 0x6B, 0x00, 0x69, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x20, 0x00, 0x65, 0x00, 0x6E, 0x00, 0x6F, 0x00, 0x75, 0x00, 0x67, 0x00, 0x68, 0x00, 0x20, 0x00, 0x66, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x67, 0x00, 0x6C, 0x00, 0x6F, 0x00, 0x6B, 0x00, 0x73, 0x00, 0x20, 0x00, 0x74, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x62, 0x00, 0x72, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x67, 0x00, 0x20, 0x00, 0x62, 0x00, 0x61, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x20, 0x00, 0x74, 0x00, 0x77, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x77, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x64, 0x00, 0x73, 0x00, 0x2E, 0x00]
        expectedMessageBytes += [0x72, 0x00, 0x00, 0x00, 0x59, 0x00, 0x6F, 0x00, 0x75, 0x00, 0x20, 0x00, 0x63, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x66, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x64, 0x00, 0x20, 0x00, 0x47, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x74, 0x00, 0x68, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x20, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x74, 0x00, 0x68, 0x00, 0x65, 0x00, 0x20, 0x00, 0x62, 0x00, 0x75, 0x00, 0x72, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x20, 0x00, 0x64, 0x00, 0x79, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x67, 0x00, 0x20, 0x00, 0x66, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x65, 0x00, 0x73, 0x00, 0x74, 0x00, 0x20, 0x00, 0x77, 0x00, 0x68, 0x00, 0x69, 0x00, 0x63, 0x00, 0x68, 0x00, 0x20, 0x00, 0x69, 0x00, 0x73, 0x00, 0x20, 0x00, 0x73, 0x00, 0x6F, 0x00, 0x75, 0x00, 0x74, 0x00, 0x68, 0x00, 0x77, 0x00, 0x65, 0x00, 0x73, 0x00, 0x74, 0x00, 0x20, 0x00, 0x6F, 0x00, 0x66, 0x00, 0x20, 0x00, 0x68, 0x00, 0x65, 0x00, 0x72, 0x00, 0x65, 0x00, 0x2E, 0x00, 0x20, 0x00, 0x57, 0x00, 0x68, 0x00, 0x65, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x79, 0x00, 0x6F, 0x00, 0x75, 0x00, 0x20, 0x00, 0x67, 0x00, 0x65, 0x00, 0x74, 0x00, 0x20, 0x00, 0x74, 0x00, 0x68, 0x00, 0x65, 0x00, 0x20, 0x00, 0x77, 0x00, 0x6F, 0x00, 0x6F, 0x00, 0x64, 0x00, 0x20, 0x00, 0x72, 0x00, 0x65, 0x00, 0x74, 0x00, 0x75, 0x00, 0x72, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x74, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x52, 0x00, 0x6F, 0x00, 0x79, 0x00, 0x63, 0x00, 0x65, 0x00, 0x2E, 0x00]
        expectedMessageBytes += [0x33, 0x00, 0x00, 0x00, 0x47, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x73, 0x00, 0x65, 0x00, 0x65, 0x00, 0x20, 0x00, 0x50, 0x00, 0x73, 0x00, 0x61, 0x00, 0x68, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x48, 0x00, 0x69, 0x00, 0x67, 0x00, 0x68, 0x00, 0x70, 0x00, 0x61, 0x00, 0x73, 0x00, 0x73, 0x00, 0x20, 0x00, 0x74, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x62, 0x00, 0x65, 0x00, 0x67, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x79, 0x00, 0x6F, 0x00, 0x75, 0x00, 0x72, 0x00, 0x20, 0x00, 0x66, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x61, 0x00, 0x6C, 0x00, 0x20, 0x00, 0x74, 0x00, 0x72, 0x00, 0x69, 0x00, 0x61, 0x00, 0x6C, 0x00, 0x2E, 0x00]        
        #
        expectedMessageByteArray = "".join( chr( val) for val in expectedMessageBytes)  # Converts to byte array vs list. 
        #
        myQuestLogList = []
        #
        myQuestText = 'Recover 3 weak herbs or roots from the orcs in Freeport, or pickclaw mystic totems and orbs near Runnyeye.  '
        myQuestLogList.append(eqoa_questlog.questlog(myQuestText))
        #
        myQuestText = 'Go to Burial Mounds and kill enough frogloks to bring back two wands.'
        myQuestLogList.append(eqoa_questlog.questlog(myQuestText))
        #
        myQuestText = 'You can find Growthor in the burnt dying forest which is southwest of here. When you get the wood return to Royce.'
        myQuestLogList.append(eqoa_questlog.questlog(myQuestText))
        #
        myQuestText = 'Go see Psahn in Highpass to begin your final trial.'
        myQuestLogList.append(eqoa_questlog.questlog(myQuestText))        
        #
        t=eqoa_questlog.questloglist(myQuestLogList)
        #
        #t.printQuestLogList()
        #
        #
        # encode Quest Log List Object and compare with expected
        #
        receivedMessageByteArray = t.encodeQuestLogList()
        #
        #print
        #print "CALCD : "+ " ".join("{:02X}".format(ord(c)) for c in receivedMessageByteArray)
        #print "EXPECT: "+ " ".join("{:02X}".format(ord(c)) for c in expectedMessageByteArray)
        #
        self.assertEquals(receivedMessageByteArray,expectedMessageByteArray)         
        
        
if __name__ == "__main__":
   #import sys;sys.argv = ['', 'Test.testName']
   unittest.main()        
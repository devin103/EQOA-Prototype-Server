'''
Created June 18th, 2017

@author: Ben Turi
'''
import unittest
import eqoa_hotkeys

#
# Values needed for hotkeyTab
#
actionList      = [ ]
labelList       = [ ]
#
actionList.append(' ');   labelList.append('Responses')
actionList.append(' ');   labelList.append('Options')
actionList.append(' ');   labelList.append('Group')
actionList.append(' ');   labelList.append('Communicate')
actionList.append('No.'); labelList.append('No')
actionList.append('|14'); labelList.append('Normal Say')
actionList.append('');    labelList.append("I don't know")

class HotkeyTabTest(unittest.TestCase):
    """Process of gathering unique hotkey information"""
    def test_hotkeyTab(self):
     #   
     #Expected first four Hotkey Tabs from Dudderz.out 
     #
     expectedMessageByteList     = []
     expectedMessageByteList.append([0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x09, 0x00, 0x00, 0x00, 0x52, 0x00, 0x65, 0x00, 0x73, 0x00, 0x70, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x65, 0x00, 0x73, 0x00])
     expectedMessageByteList.append([0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x07, 0x00, 0x00, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00])
     expectedMessageByteList.append([0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x05, 0x00, 0x00, 0x00, 0x47, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x75, 0x00, 0x70, 0x00])
     expectedMessageByteList.append([0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x43, 0x00, 0x6F, 0x00, 0x6D, 0x00, 0x6D, 0x00, 0x75, 0x00, 0x6E, 0x00, 0x69, 0x00, 0x63, 0x00, 0x61, 0x00, 0x74, 0x00, 0x65, 0x00])     
     #
     # Other Types of Hotkey Tabs
     # 1) send unicode string 
     # 2) label is string
     # 3) send command code
     #
     expectedMessageByteList.append([0x03, 0x00, 0x00, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x2E, 0x00, 0x02, 0x00, 0x00, 0x00, 0x4E, 0x00, 0x6F, 0x00])
     expectedMessageByteList.append([0x03, 0x00, 0x00, 0x00, 0x7C, 0x00, 0x31, 0x00, 0x34, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x6D, 0x00, 0x61, 0x00, 0x6C, 0x00, 0x20, 0x00, 0x53, 0x00, 0x61, 0x00, 0x79, 0x00])     
     expectedMessageByteList.append([0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x49, 0x00, 0x20, 0x00, 0x64, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x27, 0x00, 0x74, 0x00, 0x20, 0x00, 0x6B, 0x00, 0x6E, 0x00, 0x6F, 0x00, 0x77, 0x00])
     #
     expectedMessageByteArrayList = []
     for index,mba in enumerate(expectedMessageByteList):
       expectedMessageByteArrayList.append("".join( chr( val) for val in expectedMessageByteList[index]))  # Converts to byte array vs list   
     #      
     # Make a hotkeyTab from each of these values 
     #
     t=[]
     for index,value in enumerate(actionList):
        t.append(eqoa_hotkeys.hotkeyTab(actionList[index],labelList[index]))

     # Encode hotkeyTab Object and compare with expected
     #
     receivedMessageByteArrayList = []
     for index,value in enumerate(t):
       #value.printHotkeyTab()
       receivedMessageByteArrayList.append(value.encodeHotkeyTab())
     #
     #    
     for index,value in enumerate(receivedMessageByteArrayList):       
       #print
       #print "CALCD : "+ " ".join("{:02X}".format(ord(c)) for c in value)
       #print "EXPECT: "+ " ".join("{:02X}".format(ord(c)) for c in expectedMessageByteArrayList[index])
       #
       self.assertEquals(value,expectedMessageByteArrayList[index])        
    
    
class HotkeyMenuTest(unittest.TestCase):
    """Process of gathering unique hotkey menu information"""

    def test_hotkeyMenu(self):
     #   
     #Expected Messages from Dudderz.out
     #
     expectedMessageBytes     = [0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x09, 0x00, 0x00, 0x00, 0x52, 0x00, 0x65, 0x00, 0x73, 0x00, 0x70, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x65, 0x00, 0x73, 0x00, 0x02, 0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x07, 0x00, 0x00, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x04, 0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x05, 0x00, 0x00, 0x00, 0x47, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x75, 0x00, 0x70, 0x00, 0x06, 0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x43, 0x00, 0x6F, 0x00, 0x6D, 0x00, 0x6D, 0x00, 0x75, 0x00, 0x6E, 0x00, 0x69, 0x00, 0x63, 0x00, 0x61, 0x00, 0x74, 0x00, 0x65, 0x00]

     expectedMessageByteArray = "".join( chr( val) for val in expectedMessageBytes)  # Converts to byte array vs list.  
     #
     # Create hotkey Menu 
     #
     t=[]
     for index,value in enumerate(actionList):
        t.append(eqoa_hotkeys.hotkeyTab(actionList[index],labelList[index]))
     myMenu = eqoa_hotkeys.hotkeyMenu()  
     #myMenu.printHotkeyMenu()
     #
     myMenu.buildHotkeyMenu( 0x00 ,t[0:4])
     #myMenu.printHotkeyMenu()
     
     # Encode hotkeyMenu Object and compare with expected
     #
     receivedMessageByteArray = myMenu.encodeHotkeyMenu()
     #
     #    
     #print
     #print "CALCD : "+ " ".join("{:02X}".format(ord(c)) for c in receivedMessageByteArray)
     #print "EXPECT: "+ " ".join("{:02X}".format(ord(c)) for c in expectedMessageByteArray)
       #
     self.assertEquals(receivedMessageByteArray,expectedMessageByteArray)   
       
       
    
class HotkeyMenuTestList(unittest.TestCase):
    """Process of gathering unique hotkey menu information"""

    def test_hotkeyMenuList(self):
     #   
     #Expected Messages from Dudderz.out
     #
     expectedMessageBytes     = [0x04, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x09, 0x00, 0x00, 0x00, 0x52, 0x00, 0x65, 0x00, 0x73, 0x00, 0x70, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x65, 0x00, 0x73, 0x00, 0x02, 0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x07, 0x00, 0x00, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x04, 0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x05, 0x00, 0x00, 0x00, 0x47, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x75, 0x00, 0x70, 0x00, 0x06, 0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x43, 0x00, 0x6F, 0x00, 0x6D, 0x00, 0x6D, 0x00, 0x75, 0x00, 0x6E, 0x00, 0x69, 0x00, 0x63, 0x00, 0x61, 0x00, 0x74, 0x00, 0x65, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x09, 0x00, 0x00, 0x00, 0x52, 0x00, 0x65, 0x00, 0x73, 0x00, 0x70, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x65, 0x00, 0x73, 0x00, 0x02, 0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x07, 0x00, 0x00, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x04, 0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x05, 0x00, 0x00, 0x00, 0x47, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x75, 0x00, 0x70, 0x00, 0x06, 0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x0B, 0x00, 0x00, 0x00, 0x43, 0x00, 0x6F, 0x00, 0x6D, 0x00, 0x6D, 0x00, 0x75, 0x00, 0x6E, 0x00, 0x69, 0x00, 0x63, 0x00, 0x61, 0x00, 0x74, 0x00, 0x65, 0x00 ]

     expectedMessageByteArray = "".join( chr( val) for val in expectedMessageBytes)  # Converts to byte array vs list.  
     #
     # Create hotkey Menu 
     #
     t=[]
     for index,value in enumerate(actionList):
        t.append(eqoa_hotkeys.hotkeyTab(actionList[index],labelList[index]))
        
     myMenu  = eqoa_hotkeys.hotkeyMenu()
     myMenu2 = eqoa_hotkeys.hotkeyMenu()       
     #
     myMenu.buildHotkeyMenu( 0x00 ,t[0:4])
     myMenu2.buildHotkeyMenu( 0x01 ,t[0:4])
     
     
     myMenuList = eqoa_hotkeys.hotkeyMenuList([myMenu,myMenu2])

     # Encode hotkeyMenu Object and compare with expected
     #
     receivedMessageByteArray = myMenuList.encodeHotkeyMenuList()
     #
     #    
     #print
     #print "CALCD : "+ " ".join("{:02X}".format(ord(c)) for c in receivedMessageByteArray)
     #print "EXPECT: "+ " ".join("{:02X}".format(ord(c)) for c in expectedMessageByteArray)
       #
     self.assertEquals(receivedMessageByteArray,expectedMessageByteArray)   
 




 
#
# Work Here, include tests from hotkey menu
#       
class HotkeyMenuId(unittest.TestCase):

    def test_hotkeyMenuId(self):
     #   
     # This test does not have packets, but instead tests
     # ability to generated MenuId for Hotkeys
     #
     # 
     myMenuIdStringList = ['E','S-W','E-W-S','E-W-W']
     myMenuId           = [0x9,0x1E,0xDB,0x5B]  # non- techniqued
     myMenuIdList       = [[3],[4,2],[3,2,4],[3,2,2]]
     #
     # Check String to List
     #
     generatedList = []
     for value in myMenuIdStringList:
        a = eqoa_hotkeys.hotkeyMenuId()
        a.dirString = value
        a.StringToList()
        generatedList.append(a.dirList)
        
     self.assertEquals(generatedList,myMenuIdList)   
     #
     # Check List to MenuID
     #
     generatedList = []
     for value in myMenuIdList:
        a = eqoa_hotkeys.hotkeyMenuId()
        a.dirList = value
        a.listToId()
        generatedList.append(a.menuId)
        
     self.assertEquals(generatedList,myMenuId)                

if __name__ == "__main__":
   #import sys;sys.argv = ['', 'Test.testName']
   unittest.main()
   
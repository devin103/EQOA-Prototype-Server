'''
Created December 18th, 2016

@author: Devin Dallas
'''
import unittest
import eqoa_spells


class SpellTest(unittest.TestCase):
    """Process of gathering unique spell information"""

    def test_Spell(self):
     #   
     #Expected Messages from Dudderz.out First spell
     #
     expectedMessageBytes     = [0xE4, 0x02, 0x06, 0x00, 0x01, 0x00, 0x02, 0x02, 0x00, 0x00, 0xA0, 0x40, 0x00, 0x10, 0xBE, 0xBD, 0xA8, 0xD0, 0x03, 0xAB, 0xB2, 0x9C, 0xB7, 0x09, 0x02, 0x3C, 0x7E, 0x0C, 0x00, 0x00, 0x00, 0x51, 0x00, 0x75, 0x00, 0x69, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x20, 0x00, 0x53, 0x00, 0x74, 0x00, 0x72, 0x00, 0x69, 0x00, 0x6B, 0x00, 0x65, 0x00, 0x33, 0x00, 0x00, 0x00, 0x54, 0x00, 0x68, 0x00, 0x69, 0x00, 0x73, 0x00, 0x20, 0x00, 0x71, 0x00, 0x75, 0x00, 0x69, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x20, 0x00, 0x73, 0x00, 0x74, 0x00, 0x72, 0x00, 0x69, 0x00, 0x6B, 0x00, 0x65, 0x00, 0x20, 0x00, 0x77, 0x00, 0x69, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x20, 0x00, 0x61, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x20, 0x00, 0x79, 0x00, 0x6F, 0x00, 0x75, 0x00, 0x20, 0x00, 0x74, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x64, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x6D, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x65, 0x00, 0x20, 0x00, 0x64, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x61, 0x00, 0x67, 0x00, 0x65, 0x00, 0x2E, 0x00, 0x00]
     
     expectedMessageByteArray = "".join( chr( val) for val in expectedMessageBytes)  # Converts to byte array vs list.  
     #
     # Values needed for spellPattern
     #
     spell_id    = 178
     level       = 1
     unknown1    = 0 
     unknown2    = 0
     range       = 4112
     casttime    = 0      
     power       = 8  
     iconcolor   = 486870879
     icon        = -1265863830
     scope       = 1
     recast      = 30
     spellreq    = 63
     spell_name  = 'Quick Strike'
     spell_desc  = 'This quick strike will allow you to do more damage.'     
     #
     # Values needed for unique Spell
     #
     booklocation    = 3
     inhotbar        = 0
     hotbarlocation  =-1
     unknown         = 0
     showornot       = 1
     pattern         = eqoa_spells.spellPattern(spell_id, level, unknown1, unknown2, range, casttime, power,
                                iconcolor, icon, scope, recast, spellreq, spell_name, spell_desc)
     #      
     # Make a Spell from these values and add to SpellList
     #
     t = eqoa_spells.Spell(booklocation, inhotbar, hotbarlocation, unknown, showornot, pattern)
     #
     #t.printSpell()
     #
     # Decode Spell Object and compare with expected
     #
     receivedMessageByteArray = t.encodeSpell()
     #
     #print
     #print "CALCD : "+ " ".join("{:02X}".format(ord(c)) for c in receivedMessageByteArray)
     #print "EXPECT: "+ " ".join("{:02X}".format(ord(c)) for c in expectedMessageByteArray)
     #
     self.assertEquals(receivedMessageByteArray,expectedMessageByteArray)        
    
class SpellPatternTest(unittest.TestCase):

    def test_spellPattern(self):
      #
      # Expected Message Bytes are from Dudderz.out for the first spell. 
      #
      expectedMessageBytes     = [0x02, 0x00, 0x00, 0xA0, 0x40, 0x00, 0x10, 0xBE, 0xBD, 0xA8, 0xD0, 0x03, 0xAB, 0xB2, 0x9C, 0xB7, 0x09, 0x02, 0x3C, 0x7E, 0x0C, 0x00, 0x00, 0x00, 0x51, 0x00, 0x75, 0x00, 0x69, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x20, 0x00, 0x53, 0x00, 0x74, 0x00, 0x72, 0x00, 0x69, 0x00, 0x6B, 0x00, 0x65, 0x00, 0x33, 0x00, 0x00, 0x00, 0x54, 0x00, 0x68, 0x00, 0x69, 0x00, 0x73, 0x00, 0x20, 0x00, 0x71, 0x00, 0x75, 0x00, 0x69, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x20, 0x00, 0x73, 0x00, 0x74, 0x00, 0x72, 0x00, 0x69, 0x00, 0x6B, 0x00, 0x65, 0x00, 0x20, 0x00, 0x77, 0x00, 0x69, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x20, 0x00, 0x61, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x20, 0x00, 0x79, 0x00, 0x6F, 0x00, 0x75, 0x00, 0x20, 0x00, 0x74, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x64, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x6D, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x65, 0x00, 0x20, 0x00, 0x64, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x61, 0x00, 0x67, 0x00, 0x65, 0x00, 0x2E, 0x00, 0x00]
      expectedMessageByteArray = "".join( chr( val) for val in expectedMessageBytes)  # Converts to byte array instead of list.     
      #
      spell_id    = 178
      level       = 1
      unknown1    = 0 
      unknown2    = 0
      range       = 4112
      casttime    = 0      
      power       = 8  
      iconcolor   = 486870879
      icon        = -1265863830
      scope       = 1
      recast      = 30
      spellreq    = 63
      spell_name  = 'Quick Strike'
      spell_desc  = 'This quick strike will allow you to do more damage.'
      
      #
      # Create spellPattern Object
      #
      t = eqoa_spells.spellPattern(spell_id, level, unknown1, unknown2, range, casttime, power, iconcolor, icon, scope, recast, spellreq, spell_name, spell_desc)
      #
      # Print out spellPattern Object
      #
      #t.printspellPattern() # can comment this out if desired
      #
      # Decode spellPattern Object and compare with expected
      #
      receivedMessageByteArray = t.encodeSpellPattern()
      #
      #print
      #print "CALCD : "+ " ".join("{:02X}".format(ord(c)) for c in receivedMessageByteArray)
      #print "EXPECT: "+ " ".join("{:02X}".format(ord(c)) for c in expectedMessageByteArray)
      #
      self.assertEquals(receivedMessageByteArray,expectedMessageByteArray)


if __name__ == "__main__":
   #import sys;sys.argv = ['', 'Test.testName']
   unittest.main()
   
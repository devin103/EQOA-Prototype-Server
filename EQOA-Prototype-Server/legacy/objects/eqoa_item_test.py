'''
Created on July 3, 2016

@author:  Ben Turi
'''
import unittest
import eqoa_item
#
# Describe GotItem for all Tests
#
# Pattern Attributes
#
pattern_id   = 31360  # this was in error on PAT output
itemfamily   = 7817
unknown1     = 0
itemicon     = 337212673
unknown2     = 0
equipmentslot= 5
unknown3     = 0
tradeable    = 1
rentable     = 1
unknown4     = 0
attacktype   = 0
weapondamage = 0
unknown5     = 0
levelreq     = 60
maxstack     = 1
hpmax        = 15400
duration     = 80
Class        = 1
race         = 1023
procanimation= 0
lore         = 1
unknown6     = 0
craftable    = 0
item_name    = 'Chestplate of the Transgressor'
item_desc    = 'Armor for the followers of Akessan'
#
myStatList = [[eqoa_item.STAT.STR,15],[eqoa_item.STAT.LR,10],[eqoa_item.STAT.AC,474],[eqoa_item.STAT.DEX,15],[eqoa_item.STAT.HPMAX,175]]
#
# unique Item Attributes
#
stacks_remain    = 1
hp_remain        = 15181
charge_remain    = 0 
#
# Got Item Attributes
#
where_equipped   = eqoa_item.WHERE_EQUIPPED.CHEST
location         = eqoa_item.ITEM_LOCATION.INVENTORY
num_in_list      = 0      # must use 4 bytes
#

#
################################################################################
#

class itemPatternTest(unittest.TestCase): 
   def test_itemPattern(self):
     #
     # Expected Message Bytes are from Dudderz.out for the first piece of item. 
     #
     expectedMessageBytes     = [0x80, 0xea, 0x03, 0x92, 0x7A, 0x00, 0x82, 0xD4, 0xCB, 0xC1, 0x02, 0x00, 0x0A, 0x00, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x78, 0x02,  0xD0, 0xF0, 0x01, 0xA0, 0x01, 0x02, 0xFE, 0x0F, 0x00, 0x02, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x43, 0x00, 0x68,  0x00, 0x65, 0x00, 0x73, 0x00, 0x74, 0x00, 0x70, 0x00, 0x6C, 0x00, 0x61, 0x00, 0x74, 0x00, 0x65, 0x00, 0x20, 0x00, 0x6F, 0x00, 0x66, 0x00, 0x20, 0x00, 0x74, 0x00, 0x68, 0x00, 0x65, 0x00, 0x20, 0x00, 0x54, 0x00, 0x72, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x67, 0x00, 0x72, 0x00, 0x65, 0x00, 0x73, 0x00, 0x73, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x22, 0x00, 0x00, 0x00, 0x41, 0x00, 0x72, 0x00, 0x6D, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x20, 0x00, 0x66, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x20, 0x00, 0x74, 0x00, 0x68, 0x00, 0x65, 0x00, 0x20, 0x00, 0x66, 0x00, 0x6F, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x65, 0x00, 0x72, 0x00, 0x73, 0x00, 0x20, 0x00, 0x6F, 0x00, 0x66, 0x00, 0x20, 0x00, 0x41, 0x00, 0x6B, 0x00, 0x65, 0x00, 0x73, 0x00, 0x73, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x0A, 0x02, 0x1E, 0x06, 0x1E, 0x10, 0xDE, 0x02, 0x1C, 0xB4, 0x07, 0x34, 0x14] 
     #
     expectedMessageByteArray = "".join( chr( val) for val in expectedMessageBytes)  # Converts to byte array vs list.          
     #
     myStatObject = eqoa_item.Stat()
     myStatObject.buildStatFromList(myStatList)
     #
     # Create item Pattern Object 
     #
     myItemPattern = eqoa_item.itemPattern(pattern_id, itemfamily, unknown1, itemicon, unknown2, equipmentslot, unknown3, tradeable,rentable, unknown4, attacktype, weapondamage, unknown5, levelreq, maxstack, hpmax, duration, Class, race,procanimation, lore, unknown6, craftable, item_name, item_desc, myStatObject)
     #myItemPattern.printItemPattern()
     #
     # Decode itemPattern Object and compare with expected
     #
     receivedMessageByteArray = myItemPattern.encodeItemPattern()
     #
     #print
     #print "CALCD : "+ " ".join("{:02X}".format(ord(c)) for c in receivedMessageByteArray)
     #print "EXPECT: "+ " ".join("{:02X}".format(ord(c)) for c in expectedMessageByteArray)
     #
     self.assertEquals(receivedMessageByteArray,expectedMessageByteArray)    
#
################################################################################
#
class itemTest(unittest.TestCase):

    def test_item(self):
      #
      # Expected Message Bytes are from Dudderz.out for the first piece of item. 
      #
      expectedMessageBytes     = [0x02, 0x9a, 0xed ,0x01, 0x00]        # Item Attributes 
      #expectedMessageBytes    += [0x80, 0xea, 0x03, 0x92, 0x7A, 0x00, 0x82, 0xD4, 0xCB, 0xC1, 0x02, 0x00, 0x0A, 0x00, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x78, 0x02,  0xD0, 0xF0, 0x01, 0xA0, 0x01, 0x02, 0xFE, 0x0F, 0x00, 0x02, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x43, 0x00, 0x68,  0x00, 0x65, 0x00, 0x73, 0x00, 0x74, 0x00, 0x70, 0x00, 0x6C, 0x00, 0x61, 0x00, 0x74, 0x00, 0x65, 0x00, 0x20, 0x00, 0x6F, 0x00, 0x66, 0x00, 0x20, 0x00, 0x74, 0x00, 0x68, 0x00, 0x65, 0x00, 0x20, 0x00, 0x54, 0x00, 0x72, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x67, 0x00, 0x72, 0x00, 0x65, 0x00, 0x73, 0x00, 0x73, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x22, 0x00, 0x00, 0x00, 0x41, 0x00, 0x72, 0x00, 0x6D, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x20, 0x00, 0x66, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x20, 0x00, 0x74, 0x00, 0x68, 0x00, 0x65, 0x00, 0x20, 0x00, 0x66, 0x00, 0x6F, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x65, 0x00, 0x72, 0x00, 0x73, 0x00, 0x20, 0x00, 0x6F, 0x00, 0x66, 0x00, 0x20, 0x00, 0x41, 0x00, 0x6B, 0x00, 0x65, 0x00, 0x73, 0x00, 0x73, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x0A, 0x02, 0x1E, 0x06, 0x1E, 0x10, 0xDE, 0x02, 0x1C, 0xB4, 0x07, 0x34, 0x14] 
      #
      expectedMessageByteArray = "".join( chr( val) for val in expectedMessageBytes)  # Converts to byte array instead of list.     
      #
      # Build stat object for itemPattern
      #
      myStatObject = eqoa_item.Stat()
      myStatObject.buildStatFromList(myStatList)
      #
      # Build itemPattern
      #
      myItemPatternObject = eqoa_item.itemPattern(pattern_id, itemfamily, unknown1, itemicon, unknown2, equipmentslot, unknown3, tradeable,rentable, unknown4, attacktype, weapondamage, unknown5, levelreq, maxstack, hpmax, duration, Class, race,procanimation, lore, unknown6, craftable, item_name, item_desc, myStatObject)
      #
      # Create item Object
      #
      myItem = eqoa_item.item(stacks_remain, hp_remain, charge_remain, myItemPatternObject)
      #
      # Print out item Object
      #
      #myItem.printitem() # can comment this out if desired
      #
      # Decode item Object and compare with expected
      #
      receivedMessageByteArray = myItem.encodeItem()
      #
      #print
      #print "CALCD : "+ " ".join("{:02X}".format(ord(c)) for c in receivedMessageByteArray)
      #print "EXPECT: "+ " ".join("{:02X}".format(ord(c)) for c in expectedMessageByteArray)
      #
      self.assertEquals(receivedMessageByteArray,expectedMessageByteArray)
    
#
############################################################################################
#     
class gotItemTest(unittest.TestCase):
 
   def test_gotItem(self):
      #
      # Expected Message Bytes are from Dudderz.out for the first piece of item. 
      #
      expectedMessageBytes     = [0x02, 0x9a, 0xed ,0x01, 0x00]        # Item Attributes 
      expectedMessageBytes    += [0x0A, 0x01, 0x00, 0x00, 0x00, 0x00]  # Got Item Attributes
      expectedMessageBytes    += [0x80, 0xea, 0x03, 0x92, 0x7A, 0x00, 0x82, 0xD4, 0xCB, 0xC1, 0x02, 0x00, 0x0A, 0x00, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x78, 0x02,  0xD0, 0xF0, 0x01, 0xA0, 0x01, 0x02, 0xFE, 0x0F, 0x00, 0x02, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x43, 0x00, 0x68,  0x00, 0x65, 0x00, 0x73, 0x00, 0x74, 0x00, 0x70, 0x00, 0x6C, 0x00, 0x61, 0x00, 0x74, 0x00, 0x65, 0x00, 0x20, 0x00, 0x6F, 0x00, 0x66, 0x00, 0x20, 0x00, 0x74, 0x00, 0x68, 0x00, 0x65, 0x00, 0x20, 0x00, 0x54, 0x00, 0x72, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x67, 0x00, 0x72, 0x00, 0x65, 0x00, 0x73, 0x00, 0x73, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x22, 0x00, 0x00, 0x00, 0x41, 0x00, 0x72, 0x00, 0x6D, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x20, 0x00, 0x66, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x20, 0x00, 0x74, 0x00, 0x68, 0x00, 0x65, 0x00, 0x20, 0x00, 0x66, 0x00, 0x6F, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x65, 0x00, 0x72, 0x00, 0x73, 0x00, 0x20, 0x00, 0x6F, 0x00, 0x66, 0x00, 0x20, 0x00, 0x41, 0x00, 0x6B, 0x00, 0x65, 0x00, 0x73, 0x00, 0x73, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x0A, 0x02, 0x1E, 0x06, 0x1E, 0x10, 0xDE, 0x02, 0x1C, 0xB4, 0x07, 0x34, 0x14] 
      #
      expectedMessageByteArray = "".join( chr( val) for val in expectedMessageBytes)  # Converts to byte array instead of list.     
      #
      # Build stat object for itemPattern
      #
      myStatObject = eqoa_item.Stat()
      myStatObject.buildStatFromList(myStatList)
      #
      # Build itemPattern
      #
      myItemPatternObject = eqoa_item.itemPattern(pattern_id, itemfamily, unknown1, itemicon, unknown2, equipmentslot, unknown3, tradeable,rentable, unknown4, attacktype, weapondamage, unknown5, levelreq, maxstack, hpmax, duration, Class, race,procanimation, lore, unknown6, craftable, item_name, item_desc, myStatObject)
      #
      # Create item Object
      # 
      myItem = eqoa_item.item(stacks_remain, hp_remain, charge_remain, myItemPatternObject)      
      #
      # Create GotItem Object
      #   
      myGotItem = eqoa_item.gotItem(where_equipped, location, num_in_list, myItem)
      #
      # Print out item Object
      #
      #myItem.printGotItem() # can comment this out if desired
      #
      # Decode item Object and compare with expected
      #
      receivedMessageByteArray = myGotItem.encodeGotItem()
      #
      #print
      #print "CALCD : "+ " ".join("{:02X}".format(ord(c)) for c in receivedMessageByteArray)
      #print "EXPECT: "+ " ".join("{:02X}".format(ord(c)) for c in expectedMessageByteArray)
      #
      self.assertEquals(receivedMessageByteArray,expectedMessageByteArray)

#
####################################################################################################################
#           
class statTest(unittest.TestCase):
 
   def test_stat(self):
      #
      #
      # Expected Message Bytes are from Dudderz.out for the first piece of item. 
      #
      expectedMessageBytes     = [0x0A, 0x02, 0x1E, 0x06, 0x1E, 0x10, 0xDE, 0x02, 0x1C, 0xB4, 0x07, 0x34, 0x14]
      expectedMessageByteArray = "".join( chr( val) for val in expectedMessageBytes)  # Converts to byte array instead of list.     
      #
      myStatObject = eqoa_item.Stat()            # Init Stat Object
      myStatObject.buildStatFromList(myStatList) # Create Stat Object from list
      #
      #myStatObject.printFullStat()  # Print if desired
      #myStatObject.printShortStat() # Print if desired
      #
      receivedMessageByteArray = myStatObject.encodeStat()  # Perform Encoding
      #
      #print
      #print "CALCD : "+ " ".join("{:02X}".format(ord(c)) for c in receivedMessageByteArray)
      #print "EXPECT: "+ " ".join("{:02X}".format(ord(c)) for c in expectedMessageByteArray)
      #
      self.assertEquals(receivedMessageByteArray,expectedMessageByteArray)

class test_itemList(unittest.TestCase):

    def test_itemList(self):
    
        expectedMessageBytes = []
        expectedMessageBytes += [0x02, 0x9a, 0xed, 0x01, 0x00, 0x0A, 0x01, 0x00, 0x00, 0x00, 0x00, 0x80, 0xea, 0x03, 0x92, 0x7A, 0x00, 0x82, 0xD4, 0xCB, 0xC1, 0x02, 0x00, 0x0A, 0x00, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x78, 0x02, 0xD0, 0xF0, 0x01, 0xA0, 0x01, 0x02, 0xFE, 0x0F, 0x00, 0x02, 0x00, 0x00, 0x1E, 0x00, 0x00, 0x00, 0x43, 0x00, 0x68, 0x00, 0x65, 0x00, 0x73, 0x00, 0x74, 0x00, 0x70, 0x00, 0x6C, 0x00, 0x61, 0x00, 0x74, 0x00, 0x65, 0x00, 0x20, 0x00, 0x6F, 0x00, 0x66, 0x00, 0x20, 0x00, 0x74, 0x00, 0x68, 0x00, 0x65, 0x00, 0x20, 0x00, 0x54, 0x00, 0x72, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x67, 0x00, 0x72, 0x00, 0x65, 0x00, 0x73, 0x00, 0x73, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x22, 0x00, 0x00, 0x00, 0x41, 0x00, 0x72, 0x00, 0x6D, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x20, 0x00, 0x66, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x20, 0x00, 0x74, 0x00, 0x68, 0x00, 0x65, 0x00, 0x20, 0x00, 0x66, 0x00, 0x6F, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x65, 0x00, 0x72, 0x00, 0x73, 0x00, 0x20, 0x00, 0x6F, 0x00, 0x66, 0x00, 0x20, 0x00, 0x41, 0x00, 0x6B, 0x00, 0x65, 0x00, 0x73, 0x00, 0x73, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x0A, 0x02, 0x1E, 0x06, 0x1E, 0x10, 0xDE, 0x02, 0x1C, 0xB4, 0x07, 0x34, 0x14]
        expectedMessageBytes += [0x02, 0xB0, 0xEA, 0x01, 0x00, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0xD0, 0xD5, 0x03, 0xF0, 0x86, 0x01, 0x00, 0x82, 0xD4, 0xCB, 0xC1, 0x02, 0x00, 0x0A, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x78, 0x02, 0xB0, 0xEA, 0x01, 0x82, 0x01, 0x02, 0xFE, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x62, 0x00, 0x75, 0x00, 0x6C, 0x00, 0x77, 0x00, 0x61, 0x00, 0x72, 0x00, 0x6B, 0x00, 0x20, 0x00, 0x62, 0x00, 0x72, 0x00, 0x65, 0x00, 0x61, 0x00, 0x73, 0x00, 0x74, 0x00, 0x70, 0x00, 0x6C, 0x00, 0x61, 0x00, 0x74, 0x00, 0x65, 0x00, 0x66, 0x00, 0x00, 0x00, 0x46, 0x00, 0x65, 0x00, 0x61, 0x00, 0x72, 0x00, 0x20, 0x00, 0x68, 0x00, 0x61, 0x00, 0x73, 0x00, 0x20, 0x00, 0x6E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x20, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x74, 0x00, 0x68, 0x00, 0x65, 0x00, 0x20, 0x00, 0x70, 0x00, 0x73, 0x00, 0x79, 0x00, 0x63, 0x00, 0x68, 0x00, 0x65, 0x00, 0x20, 0x00, 0x6F, 0x00, 0x66, 0x00, 0x20, 0x00, 0x74, 0x00, 0x72, 0x00, 0x75, 0x00, 0x65, 0x00, 0x20, 0x00, 0x77, 0x00, 0x61, 0x00, 0x72, 0x00, 0x72, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x2C, 0x00, 0x20, 0x00, 0x65, 0x00, 0x73, 0x00, 0x70, 0x00, 0x65, 0x00, 0x63, 0x00, 0x69, 0x00, 0x61, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x79, 0x00, 0x20, 0x00, 0x61, 0x00, 0x20, 0x00, 0x77, 0x00, 0x61, 0x00, 0x72, 0x00, 0x72, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x20, 0x00, 0x77, 0x00, 0x68, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x64, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x20, 0x00, 0x66, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x65, 0x00, 0x20, 0x00, 0x61, 0x00, 0x72, 0x00, 0x6D, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x20, 0x00, 0x73, 0x00, 0x75, 0x00, 0x63, 0x00, 0x68, 0x00, 0x20, 0x00, 0x61, 0x00, 0x73, 0x00, 0x20, 0x00, 0x74, 0x00, 0x68, 0x00, 0x69, 0x00, 0x73, 0x00, 0x2E, 0x00, 0x08, 0x10, 0xAC, 0x02, 0x1C, 0xF8, 0x06, 0x04, 0x28, 0x00, 0x32]
        #    
        expectedMessageByteArray = "".join( chr( val) for val in expectedMessageBytes)  # Converts to byte array vs list.          
        
        myItemList = []
        
      
if __name__ == "__main__":
   #import sys;sys.argv = ['', 'Test.testName']
   unittest.main()